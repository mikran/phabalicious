(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{379:function(t,e,a){"use strict";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"scripts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scripts"}},[t._v("#")]),t._v(" Scripts")]),t._v(" "),a("p",[t._v("Scripts are a powerful concept of phabalicious. There are a lot of places where scripts can be called. The "),a("code",[t._v("common")]),t._v("-section defines common scripts to be run for specific task/installation-type-configurations, docker-tasks are also scripts which you can execute via the docker-command. And you can even script phabalicious tasks and create meta-tasks. And you can add custom scripts to the general section of a fabfile or to a host-configuration. Scripts can call other scripts.")]),t._v(" "),a("p",[t._v("A script is basically a list of commands which get executed via shell on a local or remote machine. To stay independent of the host where the script is executed, phabalicious parses the script before executing it and replaces given variables with their counterpart in the yaml file.")]),t._v(" "),a("h2",{attrs:{id:"replacement-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replacement-patterns"}},[t._v("#")]),t._v(" Replacement-patterns")]),t._v(" "),a("p",[t._v("Replacement-Patterns are specific strings enclosed in "),a("code",[t._v("%")]),t._v("s, e.g. "),a("code",[t._v("%host.port%")]),t._v(", "),a("code",[t._v("%dockerHost.rootFolder%")]),t._v(" or "),a("code",[t._v("%arguments.name%")]),t._v(".")]),t._v(" "),a("p",[t._v("Here's a simple example;")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "I am running on %host.config_name%"\n')])])]),a("p",[t._v("Calling this script via")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("phab config:mbb script:test\n")])])]),a("p",[t._v("will show "),a("code",[t._v("I am running on mbb")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("The host-configuration gets exposes via the "),a("code",[t._v("host.")]),t._v("-prefix, so "),a("code",[t._v("port")]),t._v(" maps to "),a("code",[t._v("%host.port%")]),t._v(", etc.")]),t._v(" "),a("li",[t._v("The dockerHost-configuration gets exposed via the "),a("code",[t._v("dockerHost")]),t._v("-prefix, so "),a("code",[t._v("rootFolder")]),t._v(" maps to "),a("code",[t._v("%dockerHost.rootFolder%")])]),t._v(" "),a("li",[t._v("The global configuration of the yams-file gets exposed to the "),a("code",[t._v("settings")]),t._v("-prefix, so "),a("code",[t._v("uuid")]),t._v(" gets mapped to `%settings.uuid%")]),t._v(" "),a("li",[t._v("Optional arguments to the "),a("code",[t._v("script")]),t._v("-taks get the "),a("code",[t._v("argument")]),t._v("-prefix, e.g. "),a("code",[t._v("%arguments.name%")]),t._v(". You can get all arguments via "),a("code",[t._v("%arguments.combined%")]),t._v(".")]),t._v(" "),a("li",[t._v("You can access hierarchical information via the dot-operator, e.g. "),a("code",[t._v("%host.database.name%")])])]),t._v(" "),a("p",[t._v("If phabalicious detects a pattern it can't replace it will abort the execution of the script and displays a list of available replacement-patterns.")]),t._v(" "),a("h2",{attrs:{id:"internal-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internal-commands"}},[t._v("#")]),t._v(" Internal commands")]),t._v(" "),a("p",[t._v("There are currently 3 internal commands. These commands control the flow inside phabalicious:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("fail_on_error(1|0)")]),t._v(" If fail_on_error is set to one, phabalicious will exit if one of the script commands returns a non-zero return-code. When using "),a("code",[t._v("fail_on_error(0)")]),t._v(" only a warning is displayed, the script will continue.")]),t._v(" "),a("li",[a("code",[t._v("execute(task, subtask, arguments)")]),t._v(" execute a phabalicious task. For example you can run a deployment from a script via "),a("code",[t._v("execute(deploy)")]),t._v(" or stop a docker-container from a script via "),a("code",[t._v("execute(docker, stop)")])]),t._v(" "),a("li",[a("code",[t._v("fail_on_missing_directory(directory, message)")]),t._v(" will print message "),a("code",[t._v("message")]),t._v(" if the directory "),a("code",[t._v("directory")]),t._v(" does not exist.")]),t._v(" "),a("li",[a("code",[t._v("log_message(severity, message)")]),t._v(" Prints a message to the output, for more info have a look at the "),a("a",{attrs:{href:"/scaffolder"}},[t._v("scaffolder-documentation")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("confirm(message)")]),t._v(" Will prompt for a confimation from the user.")])]),t._v(" "),a("h2",{attrs:{id:"task-related-scripts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-related-scripts"}},[t._v("#")]),t._v(" Task-related scripts")]),t._v(" "),a("p",[t._v("You can add scripts to the "),a("code",[t._v("common")]),t._v("-section, which will called for any host. You can differentiate by task-name and host-type, e.g. create a script which gets called for the task "),a("code",[t._v("deploy")]),t._v(" and type "),a("code",[t._v("dev")]),t._v(".")]),t._v(" "),a("p",[t._v("You can even run scripts before or after a task is executed. Append the task with "),a("code",[t._v("Prepare")]),t._v(" or "),a("code",[t._v("Finished")]),t._v(".")]),t._v(" "),a("p",[t._v("You can even run scripts for specific tasks and hosts. Just add your script with the task-name as its key.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deployPrepare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Preparing deploy for test"\n    '),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Deploying on test"\n    '),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deployFinished")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Deployment finished for test"\n')])])]),a("p",[t._v("These scripts in the above examples gets executed only for the host "),a("code",[t._v("test")]),t._v(" and task "),a("code",[t._v("deploy")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"defaults"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaults"}},[t._v("#")]),t._v(" Defaults")]),t._v(" "),a("p",[t._v("You an provide defaults for a script, which can be verridden via the "),a("code",[t._v("--arguments")]),t._v(" commandline option")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaults")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" World\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "Hello %arguments.foo%"\n')])])]),a("p",[t._v("Running")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("phab -c<config> script test\n")])])]),a("p",[t._v("will output "),a("code",[t._v("Hello World")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("phab -c<config> script test --arguments foo=bar\n")])])]),a("p",[t._v("will output "),a("code",[t._v("Hello bar")])]),t._v(" "),a("h2",{attrs:{id:"script-contexts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-contexts"}},[t._v("#")]),t._v(" Script contexts")]),t._v(" "),a("p",[t._v("Sometimes it makes sense to run a script in a different context, e.g. not on the host-config, but for example in the context of the kubectl application or the docker host. You can override the context via")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" kubectl\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" kubectl apply "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("f whatever\n")])])]),a("p",[t._v("The example above will run the script not in the context of the host, but in the context of the shell which also runs the kubectl command.")]),t._v(" "),a("h2",{attrs:{id:"questions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#questions"}},[t._v("#")]),t._v(" Questions")]),t._v(" "),a("p",[t._v("A script can have a collection of questions to get data from the user in an interactive way. Here's an example:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("createRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("questions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("question")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" What version should we use to tag the current commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("validation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$/"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The version needs to adhere to the following schema: x.x.x"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" log_message(Tagging current commit with %arguments.version% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(")\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git tag %arguments.version% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('m "tagging %arguments.version%"\n      '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" confirm(Is everything looking good"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" Can I continue with pushing to origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(")\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" git push; git push "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("tags\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" log_message(success"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Tagged and pushed version %arguments.version%"),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!)")]),t._v("\n")])])]),a("p",[t._v("See the "),a("code",[t._v("questions")]),t._v("-section in the scaffolder docs for more infos.")]),t._v(" "),a("p",[t._v("If the user provides command line arguments with the same name as the question key, the question wont be shown, eg.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("phab -cconfig script createRelease --arguments version=1.0.0\n")])])]),a("h2",{attrs:{id:"computed-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed-values"}},[t._v("#")]),t._v(" Computed values")]),t._v(" "),a("p",[t._v("Computed values allows to call external commands and store their return value as a replacement pattern, which can be used in the script-part later. The results of the commands are stored under the corresponding key in the "),a("code",[t._v("%computed%")]),t._v(" dictionary. In the below example the result of "),a("code",[t._v("git describe ...")]),t._v(" gets stored as "),a("code",[t._v("%computed.currentVersion%")]),t._v(" and can be used in the scripts-part.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("showVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("computedValues")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("currentVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" git describe "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("abbrev=0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("tag\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" log_message(success"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Current version is %computed.currentVersion%)\n")])])]),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("A rather complex example scripting phabalicious.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scripts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runTests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaults")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" develop\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" waitForServices)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(deploy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" %arguments.branch%)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" behatInstall)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" behat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("profile=ci "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("format=junit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("format=progress)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(getFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" /var/www/_tools/behat/build/behat/default.xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ./_tools/behat)\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" execute(docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stop)\n")])])]),a("p",[t._v("This script will")]),t._v(" "),a("ul",[a("li",[t._v("start the docker-container,")]),t._v(" "),a("li",[t._v("wait for it,")]),t._v(" "),a("li",[t._v("deploys the given branch,")]),t._v(" "),a("li",[t._v("run a script which will install behat,")]),t._v(" "),a("li",[t._v("run behat with some custom arguments,")]),t._v(" "),a("li",[t._v("gets the result-file and copy it to a location,")]),t._v(" "),a("li",[t._v("and finally stops the container.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);