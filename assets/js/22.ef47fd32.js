(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{377:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"scaffolding-arbitrary-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scaffolding-arbitrary-files"}},[t._v("#")]),t._v(" Scaffolding arbitrary files")]),t._v(" "),e("p",[t._v("Phabalicious supports not only scaffolding new applications, but arbitrary files. The command allows to be extended by socalled plugins which implements "),e("code",[t._v("Phabalicious\\Utilities\\PluginInterface")]),t._v(". The following plugin types are currently supported:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("transformers")]),t._v(", they take a yaml file as input, transform them to something different which will be written to the filesystem. transformer-plugins need to implement "),e("code",[t._v("Phabalicious\\Scaffolder\\Transformers\\DataTransformerInterface")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"running-the-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-the-command"}},[t._v("#")]),t._v(" Running the command")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("phab scaffold path/to/scaffold-file.yaml\n")])])]),e("h2",{attrs:{id:"the-scaffold-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-scaffold-file"}},[t._v("#")]),t._v(" the scaffold-file")]),t._v(" "),e("p",[t._v("The scaffold-file has the same structure as used for scaffolding applications. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requires")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("plugins")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" vendor/factorial"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("io/phab"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("entity"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("scaffolder/src/transformers\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image_styles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" image_style\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("block_content")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" block_content\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(block_content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" block_content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config/sync)\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(imagestyles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" image_styles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config/sync)\n")])])]),e("ul",[e("li",[e("code",[t._v("requires")]),t._v(" set the minimal phabalicious version this file works with.")]),t._v(" "),e("li",[t._v("the "),e("code",[t._v("plugins")]),t._v("-section reference paths to phabalicious-plugins. Every php file in that folder will be tried to be included and checked if they implement the required interfaces.")]),t._v(" "),e("li",[e("code",[t._v("scaffold")]),t._v(" contains a list of script lines where replacement patterns a]get replaced and run via bash, if not an internal command is used.")]),t._v(" "),e("li",[t._v("It may also contain "),e("code",[t._v("assets")]),t._v(" and/or "),e("code",[t._v("questions")]),t._v(" as described in "),e("RouterLink",{attrs:{to:"/app-scaffold.html"}},[t._v("here")]),t._v(", but they are not required.")],1)]),t._v(" "),e("h3",{attrs:{id:"list-of-supported-internal-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-of-supported-internal-commands"}},[t._v("#")]),t._v(" List of supported internal commands:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("log_message")]),t._v(" to print a message with a severity")]),t._v(" "),e("li",[e("code",[t._v("copy_assets")]),t._v(" to copy assets and apply replacement patterns")]),t._v(" "),e("li",[e("code",[t._v("alter_json_file")]),t._v(" which will alter an existing json file and change some data")]),t._v(" "),e("li",[e("code",[t._v("assert_file")]),t._v(" throws an exception if the file does not exist")])]),t._v(" "),e("h3",{attrs:{id:"list-of-commands-which-needs-one-or-more-plugin-implementations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-of-commands-which-needs-one-or-more-plugin-implementations"}},[t._v("#")]),t._v(" List of commands which needs one or more plugin implementations")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("transform")]),t._v(" to transform a bunch of yml files to sth different. This command needs an implementation via plugin")])]),t._v(" "),e("h2",{attrs:{id:"copy-assets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-assets"}},[t._v("#")]),t._v(" "),e("code",[t._v("copy_assets")])]),t._v(" "),e("p",[e("code",[t._v("copy_assets")]),t._v(" can be used in the scaffold-section to copy assets  into a specific location. The syntax is")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("copy_assets(<targetFolder>, <assetsKey=assets>, <fileExtensionForTwigParsing>)\n")])])]),e("p",[t._v("Phabalicious will load the asset-file, apply the replacement-patterns to the file-name ("),e("RouterLink",{attrs:{to:"/app-scaffold.html"}},[t._v("see")]),t._v(" the "),e("code",[t._v("deploymentAssetsfor")]),t._v(" an example) and parse the content via twig. The result will be stored inside the "),e("code",[t._v("<targetFolder>")]),t._v(". If "),e("code",[t._v("<fileExtensionForTwigParsing>")]),t._v(" is set, then only files with that extension will be handled by twig.")],1),t._v(" "),e("h2",{attrs:{id:"log-message-severity-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#log-message-severity-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("log_message(severity, message)")])]),t._v(" "),e("p",[e("code",[t._v("log_message")]),t._v(" will log a string to the output of phabalicious. It supports several notification levels, e.g.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" log_message(info"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("warning"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("success"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" the message to display)\n")])])]),e("h2",{attrs:{id:"alter-json-file-file-path-data-ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alter-json-file-file-path-data-ref"}},[t._v("#")]),t._v(" "),e("code",[t._v("alter_json_file(file_path, data_ref)")])]),t._v(" "),e("p",[t._v("This internal command can alter a json-file. It will merge the data from a yaml section into the json file. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dataToInject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" foo\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bar\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dict")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boo\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" far\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  alter_json_file(package.json"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dataToInject)\n")])])]),e("h2",{attrs:{id:"assert-file-file-path-error-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assert-file-file-path-error-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("assert_file(file_path, error_message)")])]),t._v(" "),e("p",[t._v("This internal command will throw an exception if the specified file does not exist. Useful to check if the user is in the right directory.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" assert_file(<file_path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <error_message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h2",{attrs:{id:"confirm-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#confirm-message"}},[t._v("#")]),t._v(" "),e("code",[t._v("confirm(message)")])]),t._v(" "),e("p",[t._v("This internal command will ask the user for confirmation before continuing showing "),e("code",[t._v("message")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" confirm(<message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("h2",{attrs:{id:"transform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transform"}},[t._v("#")]),t._v(" "),e("code",[t._v("transform")])]),t._v(" "),e("p",[t._v("This internal command will transform a list of yml files to sth different with the help of plugins. THe plugins need to be declared in the "),e("code",[t._v("plugins")]),t._v("-section.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scaffold")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" transform(<nameOfPlugin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <yamlKeyToGetListOfFilesFrom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" <targetPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(")\n")])])]),e("ul",[e("li",[e("code",[t._v("<nameOfPlugin>")]),t._v(" is the plugin-name to use for the trnasforming. Depends on the plugin implementation")]),t._v(" "),e("li",[e("code",[t._v("<yamlKeyToGetListOfFilesFrom>")]),t._v(" Similar to "),e("code",[t._v("copy_assets")]),t._v(", its a reference in the yaml-file which contains a list of files/ directories where phabalicious will try to load yaml files from.")]),t._v(" "),e("li",[e("code",[t._v("<targetPath>")]),t._v(" the target directory where the resulting files should be saved to.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);